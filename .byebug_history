exit
heap.arr
heap.min_heapify
heap = Heap.new l1
l1 = [10, 8, 9, 7, 6, 5, 4]
%n{10 8 9 7 6 5 4}
%i{10 8 9 7 6 5 4}
%w{10, 8, 9, 7, 6, 5, 4}
heap.arr
exit
heap
exit
arr[left]
arr.length
arr.lenth
arr
right
left
self.i
left
exit
(length / 2) + 1
length
left
smaller
i
left <= length
smaller
left
exit
arr
left
arr[left]
left <= length && arr[left].to_i < arr[smaller]
smaller
left
exit
heap.arr
heap.max_heapify
heap = Heap.new [2,0,1,3,6,5,4]
heap.arr
heap.min_heapify
heap = Heap.new [2,0,1,3,6,5,4]
heap
heap.arr
exit
heap
heap.max_heapify
heap = Heap.new [2,0,1,3,6,5,4]
heap
heap.max_heapify
heap = Heap.new [0,3,6]
heap
exit
heap
exit
heap
heap.arr
heap.max_heapify
heap
exit
heap = Heap.new [1,5,4]
heap.arr
heap
exit
s2.display
s1.display
s1
s2
exit
s2
s1
c
s2.pop
s2
s2.push item
!s2.empty? && s2.peek < item
item
exit
s2.peek
!s2.empty?
s2
s1
s2.empty?
!s2.empty?
s2.empty?!s2.empty?
s2.empty?
exit
result
exit
result
exit
res[:list]
list2
list1
list
res[:list]
exit
list1
l1
res[:list]
exit
res[:list]
res[:list].next
res[:list].value
res[:list].vlaue
res[:list]
res[:node]
res
