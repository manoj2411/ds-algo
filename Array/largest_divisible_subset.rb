def largest_divisible_subset(nums)
    # helper(nums.sort, 0, [])
    nums.sort!
    sets = Array.new(nums.length)
    nums.each_with_index { |e, i| sets[i] = [e] }
    result = []

    for i in 0..(nums.length - 1)
        j = i - 1
        curr = sets[i]

        while j >= 0

            if nums[i] % nums[j] == 0
                curr = sets[j] + sets[i] if curr.length < (sets[j].length + 1)
            end

            j -= 1
        end
        sets[i] = curr
        result = curr if curr.length > result.length
    end
    # puts "sets: #{sets}"
    result
end

# recursive solution but its brute force - take exponential time
#
def helper(nums, i, curr_set)
    return curr_set if i == nums.length

    with_curr = []
    if curr_set.empty? || curr_set.last % nums[i] == 0 || nums[i] % curr_set.last == 0
        with_curr = helper(nums, i + 1, curr_set + [nums[i]])
    end
    without_curr = helper(nums, i + 1, curr_set)

    without_curr.length > with_curr.length ? without_curr : with_curr
end

puts largest_divisible_subset([1,2,3]).to_s # [1,2] or [1,3]
puts largest_divisible_subset([2,3,6,9,81].shuffle).to_s # [3,9,81]
puts largest_divisible_subset([2,3]).to_s # [2] or [3]
puts largest_divisible_subset([3]).to_s # [3]
puts largest_divisible_subset([]).to_s # []
puts largest_divisible_subset([1, 16, 7, 8, 4]).to_s # [1, 16, 8, 4]
puts largest_divisible_subset([2, 4, 3, 8]).to_s # [2,4,8]
arr = [372,513,745,974,872,838,144,122,576,912,568,881,686,133,507,448,251,464,704,808,192,754,518,112,834,141,936,660,977,177,383,489,273,357,712,110,500,186,685,412,753,918,97,886,424,896,488,239,599,295,360,142,48,229,606,233,369,541,892,345,69,275,185,341,983,897,802,482,434,893,107,342,423,531,237,910,121,188,205,481,681,604,709,286,837,430,178,80,774,246,706,959,938,688,207,91,170,992,929,414,387,600,269,696,509,390,235,65,222,915,21,930,201,209,359,378,288,485,976,346,795,913,33,353,4,554,344,284,968,670,426,471,291,332,680,355,748,901,622,120,182,174,903,320,377,878,665,171,791,697,523,146,218,429,570,89,450,995,740,468,595,771,694,23,814,493,223,164,473,100,828,242,877,869,127,86,167,969,394,437,60,861,31,831,725,853,533,890,57,734,505,75,898,329,77,323,768,953,543,154,79,628,673,478,641,590,700,732,973,882,470,49,735,3,143,855,1000,272,328,454,349,573,301,545,727,525,751,678,743,619,442,943,676,633,991,410,987,280,904,841,655,255,926,583,927,274,937,499,577,658,327,386,650,5,863,165,299,538,149,290,136,921,575,809,449,679,225,404,511,413,868,480,253,984,609,115,148,908,652,296,549,302,783,821,111,663,911,405,637,435,213,833,946,366,597,198,931,417,914,564,61,285,215,491,722,601,104,737,703,132,928,64,316,264,389,978,195,157,427,108,534,990,521,556,71,63,497,672,166,221,385,19,228,634,206,477,632,10,160,532,529,589,952,810,651,800,169,32,719,103,92,902,462,691,95,659,135,496,643,73,379,826,970,625,806,138,656,524,526,764,227,231,917,711,749,151,770,416,909,287,975,736,744,7,859,336,85,566,693,1,629,569,729,988,498,134,613,535,140,361,67,433,74,50,44,28,486,596,752,666,123,26,102,919,996,715,894,998,479,786,248,70,352,989,415,278,313,965,308,766,789,986,35,310,883,851,29,20,803,267,762,522,501,268,790,41,238,36,947,117,158,639,438,866,804,116,258,252,68,443,578,119,55,452,920,325,262,862,923,699,876,966,282,94,586,105,873,56,598,139,294,193,12,461,646,932,137,350,540,276,536,776,948,175,858,475,234,824,447,445,319,189,179,446,199,358,289,161,945,922,34,508,129,683,82,200,865,322,884,243,490,773,618,24,455,512,888,638,17,43,799,42,257,66,848,279,621,610,315,957,270,891,608,180,303,457,53,76,692,118,967,39,187,649,563,780,453,624,985,153,671,37,607,393,216,245,726,857,794,778,747,356,905,392,283,879,933,8,484,130,775,339,916,456,374,630,271,860,203,562,348,582,124,689,391,236,701,128,669,956,240,363]
puts largest_divisible_subset(arr).to_s # [1, 3, 12, 24, 48, 144, 288, 576]
